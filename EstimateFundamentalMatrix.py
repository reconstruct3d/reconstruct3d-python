# Autogenerated with SMOP 
from smop.core import *
# EstimateFundamentalMatrix.m

    
@function
def EstimateFundamentalMatrix(x1=None,x2=None,*args,**kwargs):
    varargin = EstimateFundamentalMatrix.varargin
    nargin = EstimateFundamentalMatrix.nargin

    ## EstimateFundamentalMatrix
# Estimate the fundamental matrix from two image point correspondences 
# Inputs:
#     x1 - size (N x 2) matrix of points in image 1
#     x2 - size (N x 2) matrix of points in image 2, each row corresponding
#       to x1
# Output:
#    F - size (3 x 3) fundamental matrix with rank 2
    
    N=length(x1)
# EstimateFundamentalMatrix.m:11
    A=zeros(N,9)
# EstimateFundamentalMatrix.m:12
    for i in arange(1,N).reshape(-1):
        A[i,:]=cat(dot(x2[i,1],x1[i,1]),dot(x2[i,1],x1[i,2]),x2[i,1],dot(x2[i,2],x1[i,1]),dot(x2[i,2],x1[i,2]),x2[i,2],x1[i,1],x1[i,2],1)
# EstimateFundamentalMatrix.m:15
    
    __,__,V=svd(A,nargout=3)
# EstimateFundamentalMatrix.m:18
    h=V[:,end()]
# EstimateFundamentalMatrix.m:19
    f=reshape(h,3,3).T
# EstimateFundamentalMatrix.m:20
    U,D,V=svd(f,nargout=3)
# EstimateFundamentalMatrix.m:21
    D[3,3]=0
# EstimateFundamentalMatrix.m:22
    F=dot(dot(U,D),V.T)
# EstimateFundamentalMatrix.m:23